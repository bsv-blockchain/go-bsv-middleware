// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.32.0
// source: auth_fetch.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "typescript";

export interface Config {
  /** optional */
  method: string;
  /** optional */
  headers: { [key: string]: string };
  /** optional (serialized as string) */
  body: string;
  /** optional */
  retryCounter: number;
}

export interface Config_HeadersEntry {
  key: string;
  value: string;
}

/** Additional options for fetch call */
export interface Options {
  /** optional */
  clientId: string;
  /** optional */
  privKeyHex: string;
}

export interface FetchRequest {
  url: string;
  /** optional */
  config:
    | Config
    | undefined;
  /** optional */
  options: Options | undefined;
}

export interface FetchResponse {
  status: number;
  statusText: string;
  headers: { [key: string]: string };
  body: string;
}

export interface FetchResponse_HeadersEntry {
  key: string;
  value: string;
}

export interface CleanUpRequest {
  clientId: string;
}

export interface CleanUpResponse {
}

function createBaseConfig(): Config {
  return { method: "", headers: {}, body: "", retryCounter: 0 };
}

export const Config = {
  encode(message: Config, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.method !== "") {
      writer.uint32(10).string(message.method);
    }
    Object.entries(message.headers).forEach(([key, value]) => {
      Config_HeadersEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    if (message.body !== "") {
      writer.uint32(26).string(message.body);
    }
    if (message.retryCounter !== 0) {
      writer.uint32(32).int32(message.retryCounter);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Config {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.method = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = Config_HeadersEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.headers[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.body = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.retryCounter = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      headers: isObject(object.headers)
        ? Object.entries(object.headers).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      retryCounter: isSet(object.retryCounter) ? globalThis.Number(object.retryCounter) : 0,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.headers) {
      const entries = Object.entries(message.headers);
      if (entries.length > 0) {
        obj.headers = {};
        entries.forEach(([k, v]) => {
          obj.headers[k] = v;
        });
      }
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    if (message.retryCounter !== 0) {
      obj.retryCounter = Math.round(message.retryCounter);
    }
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    message.method = object.method ?? "";
    message.headers = Object.entries(object.headers ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.body = object.body ?? "";
    message.retryCounter = object.retryCounter ?? 0;
    return message;
  },
};

function createBaseConfig_HeadersEntry(): Config_HeadersEntry {
  return { key: "", value: "" };
}

export const Config_HeadersEntry = {
  encode(message: Config_HeadersEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Config_HeadersEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig_HeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config_HeadersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Config_HeadersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Config_HeadersEntry>): Config_HeadersEntry {
    return Config_HeadersEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Config_HeadersEntry>): Config_HeadersEntry {
    const message = createBaseConfig_HeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseOptions(): Options {
  return { clientId: "", privKeyHex: "" };
}

export const Options = {
  encode(message: Options, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.privKeyHex !== "") {
      writer.uint32(18).string(message.privKeyHex);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Options {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.privKeyHex = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Options {
    return {
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      privKeyHex: isSet(object.privKeyHex) ? globalThis.String(object.privKeyHex) : "",
    };
  },

  toJSON(message: Options): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.privKeyHex !== "") {
      obj.privKeyHex = message.privKeyHex;
    }
    return obj;
  },

  create(base?: DeepPartial<Options>): Options {
    return Options.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Options>): Options {
    const message = createBaseOptions();
    message.clientId = object.clientId ?? "";
    message.privKeyHex = object.privKeyHex ?? "";
    return message;
  },
};

function createBaseFetchRequest(): FetchRequest {
  return { url: "", config: undefined, options: undefined };
}

export const FetchRequest = {
  encode(message: FetchRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.config !== undefined) {
      Config.encode(message.config, writer.uint32(18).fork()).ldelim();
    }
    if (message.options !== undefined) {
      Options.encode(message.options, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FetchRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.config = Config.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.options = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchRequest {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      config: isSet(object.config) ? Config.fromJSON(object.config) : undefined,
      options: isSet(object.options) ? Options.fromJSON(object.options) : undefined,
    };
  },

  toJSON(message: FetchRequest): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.config !== undefined) {
      obj.config = Config.toJSON(message.config);
    }
    if (message.options !== undefined) {
      obj.options = Options.toJSON(message.options);
    }
    return obj;
  },

  create(base?: DeepPartial<FetchRequest>): FetchRequest {
    return FetchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchRequest>): FetchRequest {
    const message = createBaseFetchRequest();
    message.url = object.url ?? "";
    message.config = (object.config !== undefined && object.config !== null)
      ? Config.fromPartial(object.config)
      : undefined;
    message.options = (object.options !== undefined && object.options !== null)
      ? Options.fromPartial(object.options)
      : undefined;
    return message;
  },
};

function createBaseFetchResponse(): FetchResponse {
  return { status: 0, statusText: "", headers: {}, body: "" };
}

export const FetchResponse = {
  encode(message: FetchResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.statusText !== "") {
      writer.uint32(18).string(message.statusText);
    }
    Object.entries(message.headers).forEach(([key, value]) => {
      FetchResponse_HeadersEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    if (message.body !== "") {
      writer.uint32(34).string(message.body);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FetchResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.statusText = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = FetchResponse_HeadersEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.headers[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.body = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchResponse {
    return {
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      statusText: isSet(object.statusText) ? globalThis.String(object.statusText) : "",
      headers: isObject(object.headers)
        ? Object.entries(object.headers).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      body: isSet(object.body) ? globalThis.String(object.body) : "",
    };
  },

  toJSON(message: FetchResponse): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.statusText !== "") {
      obj.statusText = message.statusText;
    }
    if (message.headers) {
      const entries = Object.entries(message.headers);
      if (entries.length > 0) {
        obj.headers = {};
        entries.forEach(([k, v]) => {
          obj.headers[k] = v;
        });
      }
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchResponse>): FetchResponse {
    return FetchResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchResponse>): FetchResponse {
    const message = createBaseFetchResponse();
    message.status = object.status ?? 0;
    message.statusText = object.statusText ?? "";
    message.headers = Object.entries(object.headers ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.body = object.body ?? "";
    return message;
  },
};

function createBaseFetchResponse_HeadersEntry(): FetchResponse_HeadersEntry {
  return { key: "", value: "" };
}

export const FetchResponse_HeadersEntry = {
  encode(message: FetchResponse_HeadersEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FetchResponse_HeadersEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchResponse_HeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchResponse_HeadersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: FetchResponse_HeadersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchResponse_HeadersEntry>): FetchResponse_HeadersEntry {
    return FetchResponse_HeadersEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchResponse_HeadersEntry>): FetchResponse_HeadersEntry {
    const message = createBaseFetchResponse_HeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCleanUpRequest(): CleanUpRequest {
  return { clientId: "" };
}

export const CleanUpRequest = {
  encode(message: CleanUpRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CleanUpRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCleanUpRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CleanUpRequest {
    return { clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "" };
  },

  toJSON(message: CleanUpRequest): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    return obj;
  },

  create(base?: DeepPartial<CleanUpRequest>): CleanUpRequest {
    return CleanUpRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CleanUpRequest>): CleanUpRequest {
    const message = createBaseCleanUpRequest();
    message.clientId = object.clientId ?? "";
    return message;
  },
};

function createBaseCleanUpResponse(): CleanUpResponse {
  return {};
}

export const CleanUpResponse = {
  encode(_: CleanUpResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CleanUpResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCleanUpResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CleanUpResponse {
    return {};
  },

  toJSON(_: CleanUpResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CleanUpResponse>): CleanUpResponse {
    return CleanUpResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CleanUpResponse>): CleanUpResponse {
    const message = createBaseCleanUpResponse();
    return message;
  },
};

export type AuthFetchService = typeof AuthFetchService;
export const AuthFetchService = {
  fetch: {
    path: "/typescript.AuthFetch/fetch",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FetchRequest) => Buffer.from(FetchRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FetchRequest.decode(value),
    responseSerialize: (value: FetchResponse) => Buffer.from(FetchResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FetchResponse.decode(value),
  },
  cleanUp: {
    path: "/typescript.AuthFetch/cleanUp",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CleanUpRequest) => Buffer.from(CleanUpRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CleanUpRequest.decode(value),
    responseSerialize: (value: CleanUpResponse) => Buffer.from(CleanUpResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CleanUpResponse.decode(value),
  },
} as const;

export interface AuthFetchServer extends UntypedServiceImplementation {
  fetch: handleUnaryCall<FetchRequest, FetchResponse>;
  cleanUp: handleUnaryCall<CleanUpRequest, CleanUpResponse>;
}

export interface AuthFetchClient extends Client {
  fetch(
    request: FetchRequest,
    callback: (error: ServiceError | null, response: FetchResponse) => void,
  ): ClientUnaryCall;
  fetch(
    request: FetchRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FetchResponse) => void,
  ): ClientUnaryCall;
  fetch(
    request: FetchRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FetchResponse) => void,
  ): ClientUnaryCall;
  cleanUp(
    request: CleanUpRequest,
    callback: (error: ServiceError | null, response: CleanUpResponse) => void,
  ): ClientUnaryCall;
  cleanUp(
    request: CleanUpRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CleanUpResponse) => void,
  ): ClientUnaryCall;
  cleanUp(
    request: CleanUpRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CleanUpResponse) => void,
  ): ClientUnaryCall;
}

export const AuthFetchClient = makeGenericClientConstructor(AuthFetchService, "typescript.AuthFetch") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthFetchClient;
  service: typeof AuthFetchService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
