"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.32.0
// source: auth_fetch.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthFetchClient = exports.AuthFetchService = exports.FetchResponse_HeadersEntry = exports.FetchResponse = exports.FetchRequest = exports.Options = exports.Config_HeadersEntry = exports.Config = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_js_1 = require("@grpc/grpc-js");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "typescript";
function createBaseConfig() {
    return { method: "", headers: {}, body: "", retryCounter: 0 };
}
exports.Config = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.method !== "") {
            writer.uint32(10).string(message.method);
        }
        Object.entries(message.headers).forEach(([key, value]) => {
            exports.Config_HeadersEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.body !== "") {
            writer.uint32(26).string(message.body);
        }
        if (message.retryCounter !== 0) {
            writer.uint32(32).int32(message.retryCounter);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.method = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.Config_HeadersEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.headers[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.body = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.retryCounter = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            method: isSet(object.method) ? globalThis.String(object.method) : "",
            headers: isObject(object.headers)
                ? Object.entries(object.headers).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            body: isSet(object.body) ? globalThis.String(object.body) : "",
            retryCounter: isSet(object.retryCounter) ? globalThis.Number(object.retryCounter) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.method !== "") {
            obj.method = message.method;
        }
        if (message.headers) {
            const entries = Object.entries(message.headers);
            if (entries.length > 0) {
                obj.headers = {};
                entries.forEach(([k, v]) => {
                    obj.headers[k] = v;
                });
            }
        }
        if (message.body !== "") {
            obj.body = message.body;
        }
        if (message.retryCounter !== 0) {
            obj.retryCounter = Math.round(message.retryCounter);
        }
        return obj;
    },
    create(base) {
        return exports.Config.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConfig();
        message.method = object.method ?? "";
        message.headers = Object.entries(object.headers ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.body = object.body ?? "";
        message.retryCounter = object.retryCounter ?? 0;
        return message;
    },
};
function createBaseConfig_HeadersEntry() {
    return { key: "", value: "" };
}
exports.Config_HeadersEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfig_HeadersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.Config_HeadersEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConfig_HeadersEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseOptions() {
    return { useFreshInstance: false };
}
exports.Options = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.useFreshInstance !== false) {
            writer.uint32(8).bool(message.useFreshInstance);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.useFreshInstance = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { useFreshInstance: isSet(object.useFreshInstance) ? globalThis.Boolean(object.useFreshInstance) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.useFreshInstance !== false) {
            obj.useFreshInstance = message.useFreshInstance;
        }
        return obj;
    },
    create(base) {
        return exports.Options.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOptions();
        message.useFreshInstance = object.useFreshInstance ?? false;
        return message;
    },
};
function createBaseFetchRequest() {
    return { url: "", config: undefined, options: undefined };
}
exports.FetchRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.config !== undefined) {
            exports.Config.encode(message.config, writer.uint32(18).fork()).ldelim();
        }
        if (message.options !== undefined) {
            exports.Options.encode(message.options, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFetchRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.config = exports.Config.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.options = exports.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            config: isSet(object.config) ? exports.Config.fromJSON(object.config) : undefined,
            options: isSet(object.options) ? exports.Options.fromJSON(object.options) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.config !== undefined) {
            obj.config = exports.Config.toJSON(message.config);
        }
        if (message.options !== undefined) {
            obj.options = exports.Options.toJSON(message.options);
        }
        return obj;
    },
    create(base) {
        return exports.FetchRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFetchRequest();
        message.url = object.url ?? "";
        message.config = (object.config !== undefined && object.config !== null)
            ? exports.Config.fromPartial(object.config)
            : undefined;
        message.options = (object.options !== undefined && object.options !== null)
            ? exports.Options.fromPartial(object.options)
            : undefined;
        return message;
    },
};
function createBaseFetchResponse() {
    return { status: 0, statusText: "", headers: {}, body: "" };
}
exports.FetchResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        if (message.statusText !== "") {
            writer.uint32(18).string(message.statusText);
        }
        Object.entries(message.headers).forEach(([key, value]) => {
            exports.FetchResponse_HeadersEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        if (message.body !== "") {
            writer.uint32(34).string(message.body);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFetchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.statusText = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.FetchResponse_HeadersEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.headers[entry3.key] = entry3.value;
                    }
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.body = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
            statusText: isSet(object.statusText) ? globalThis.String(object.statusText) : "",
            headers: isObject(object.headers)
                ? Object.entries(object.headers).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            body: isSet(object.body) ? globalThis.String(object.body) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        if (message.statusText !== "") {
            obj.statusText = message.statusText;
        }
        if (message.headers) {
            const entries = Object.entries(message.headers);
            if (entries.length > 0) {
                obj.headers = {};
                entries.forEach(([k, v]) => {
                    obj.headers[k] = v;
                });
            }
        }
        if (message.body !== "") {
            obj.body = message.body;
        }
        return obj;
    },
    create(base) {
        return exports.FetchResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFetchResponse();
        message.status = object.status ?? 0;
        message.statusText = object.statusText ?? "";
        message.headers = Object.entries(object.headers ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.body = object.body ?? "";
        return message;
    },
};
function createBaseFetchResponse_HeadersEntry() {
    return { key: "", value: "" };
}
exports.FetchResponse_HeadersEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFetchResponse_HeadersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.FetchResponse_HeadersEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFetchResponse_HeadersEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
exports.AuthFetchService = {
    fetch: {
        path: "/typescript.AuthFetch/Fetch",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.FetchRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.FetchRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.FetchResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.FetchResponse.decode(value),
    },
};
exports.AuthFetchClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.AuthFetchService, "typescript.AuthFetch");
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
